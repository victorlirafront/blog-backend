version: '3.8'

services:
  # MySQL Database (Production - Clever Cloud)
  mysql:
    image: mysql:8.0
    container_name: blog_mysql
    restart: unless-stopped
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
      MYSQL_DATABASE: ${BLOG_DATABASE}
    ports:
      - '${BLOG_DB_PORT}:3306'
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - blog_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: blog_redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - blog_network
    command: redis-server --appendonly yes

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: blog_backend
    restart: unless-stopped
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - BLOG_HOST=mysql
      - BLOG_DB_PORT=${BLOG_DB_PORT}
      - BLOG_USERNAME=${BLOG_USERNAME}
      - BLOG_PASSWORD=${BLOG_PASSWORD}
      - BLOG_DATABASE=${BLOG_DATABASE}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - blog_network
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3001/api',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development version (optional)
  app_dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: blog_backend_dev
    restart: unless-stopped
    ports:
      - '3002:3001'
    environment:
      - NODE_ENV=development
      - BLOG_HOST=host.docker.internal
      - BLOG_DB_PORT=${BLOG_DB_PORT}
      - BLOG_USERNAME=${BLOG_USERNAME}
      - BLOG_PASSWORD=
      - BLOG_DATABASE=${BLOG_DATABASE}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - blog_network
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run start:dev

  # Seed service (optional)
  seed:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: blog_seed
    environment:
      - NODE_ENV=development
      - BLOG_HOST=mysql
      - BLOG_DB_PORT=3306
      - BLOG_USERNAME=${BLOG_USERNAME}
      - BLOG_DB_PASSWORD=${BLOG_PASSWORD}
      - BLOG_DATABASE=${BLOG_DATABASE}
    depends_on:
      - mysql
    networks:
      - blog_network
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run seed

volumes:
  mysql_data:
  redis_data:

networks:
  blog_network:
    driver: bridge
